name: Lint, then test on all platforms

on:
  # empty "push:" will trigger CI on push to any branch
  push:
  pull_request:
    branches: [ "develop", "master" ]

jobs:
  lint:
    # only need to run on one platform since we're just looking at the code
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -el {0}
    steps:
    - uses: actions/checkout@v4
    - uses: astral-sh/ruff-action@v3
      with:
        # fail if there are Python syntax errors or undefined names
        args: "check --select=E9,F63,F7,F82"
      # do another run to produce a linting report. exit-zero treats all errors
      # as warnings.  This will flag codestyle problems in the PR but will not
      # cause the action to fail
    - run: ruff check --exit-zero --output-format=github

  test:
    # linting must succeed for testing to run; this helps us rapidly flag code
    # errors before going to testing
    needs: lint
    runs-on: ${{ matrix.os }}
    # conda enviroment activation requires bash
    defaults:
      run:
        shell: bash -el {0}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.13"] # , "3.10", "3.11", "3.12"]
      max-parallel: 5

    steps:
    - uses: actions/checkout@v4
    - name: Set up miniforge with structcol environment
      uses: conda-incubator/setup-miniconda@v3
      with:
        environment-file: environment.yml
        miniforge-version: latest
    - name: Check out python-mie and install
      shell: bash -el {0}
      run: |
        git clone -b vectorized https://github.com/manoharan-lab/python-mie.git
        pip install ./python-mie
        rm -r ./python-mie
    - name: Install plugin to annotate test results
      run: pip install pytest-github-actions-annotate-failures
    - name: Test with pytest
      run: |
        pytest
